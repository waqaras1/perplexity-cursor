import React, { useState, useEffect } from 'react'
import { Box, Flex, useToast } from '@chakra-ui/react'
import Sidebar from './components/Sidebar'
import MainContent from './components/MainContent'

function App() {
  const [messages, setMessages] = useState([])
  const [sidebarExpanded, setSidebarExpanded] = useState(false)
  const toast = useToast()

  const handleSendMessage = (message) => {
    const newMessage = {
      id: messages.length + 1,
      type: 'user',
      content: message,
      timestamp: new Date().toISOString()
    }
    setMessages([...messages, newMessage])
    
    // Simulate AI response
    setTimeout(() => {
      const aiResponse = {
        id: messages.length + 2,
        type: 'ai',
        content: 'This is a placeholder response. In a real application, this would be generated by an AI model based on your question.',
        timestamp: new Date().toISOString()
      }
      setMessages(prev => [...prev, aiResponse])
    }, 1000)
  }

  const handleSidebarHover = (expanded) => {
    setSidebarExpanded(expanded)
  }

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Cmd/Ctrl + K to focus search
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault()
        const searchInput = document.querySelector('input[placeholder*="Ask anything"]')
        searchInput?.focus()
      }
      
      // Cmd/Ctrl + N for new thread
      if ((e.metaKey || e.ctrlKey) && e.key === 'n') {
        e.preventDefault()
        toast({
          title: "New Thread",
          description: "Starting a new conversation...",
          status: "info",
          duration: 2000,
          isClosable: true,
        })
      }
      
      // Escape to clear input
      if (e.key === 'Escape') {
        const searchInput = document.querySelector('input[placeholder*="Ask anything"]')
        if (searchInput?.value) {
          searchInput.value = ''
          searchInput.dispatchEvent(new Event('input', { bubbles: true }))
        }
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [toast])

  return (
    <Flex h="100vh" bg="perplexity.bg">
      {/* Left Sidebar */}
      <Box
        onMouseEnter={() => handleSidebarHover(true)}
        onMouseLeave={() => handleSidebarHover(false)}
      >
        <Sidebar />
      </Box>
      
      {/* Main Content Area */}
      <MainContent 
        messages={messages} 
        onSendMessage={handleSendMessage}
        sidebarExpanded={sidebarExpanded}
      />
    </Flex>
  )
}

export default App 